# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'main.ui'
#
# Created by: PyQt5 UI code generator 5.15.7
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


import sys
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QMessageBox
from callbacks import callback


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(700, 450)
        MainWindow.setMinimumSize(QtCore.QSize(700, 450))
        MainWindow.setMaximumSize(QtCore.QSize(700, 450))
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.horizontalLayoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.horizontalLayoutWidget.setGeometry(QtCore.QRect(30, 30, 651, 41))
        self.horizontalLayoutWidget.setObjectName("horizontalLayoutWidget")
        self.input_layout = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget)
        self.input_layout.setSizeConstraint(
            QtWidgets.QLayout.SetDefaultConstraint)
        self.input_layout.setContentsMargins(10, 0, 10, 0)
        self.input_layout.setObjectName("input_layout")
        self.hours_field = QtWidgets.QPlainTextEdit(
            self.horizontalLayoutWidget)
        self.hours_field.setObjectName("hours_field")
        self.input_layout.addWidget(self.hours_field)
        self.minuits_field = QtWidgets.QPlainTextEdit(
            self.horizontalLayoutWidget)
        self.minuits_field.setObjectName("minuits_field")
        self.input_layout.addWidget(self.minuits_field)
        self.seconds_field = QtWidgets.QPlainTextEdit(
            self.horizontalLayoutWidget)
        self.seconds_field.setObjectName("seconds_field")
        self.input_layout.addWidget(self.seconds_field)
        self.hrs_label = QtWidgets.QLabel(self.centralwidget)
        self.hrs_label.setGeometry(QtCore.QRect(30, 10, 47, 13))
        self.hrs_label.setObjectName("hrs_label")
        self.minutes_label = QtWidgets.QLabel(self.centralwidget)
        self.minutes_label.setGeometry(QtCore.QRect(240, 10, 47, 13))
        self.minutes_label.setObjectName("minutes_label")
        self.seconds_label = QtWidgets.QLabel(self.centralwidget)
        self.seconds_label.setGeometry(QtCore.QRect(460, 10, 47, 13))
        self.seconds_label.setObjectName("seconds_label")
        self.mode = QtWidgets.QGroupBox(self.centralwidget)
        self.mode.setGeometry(QtCore.QRect(30, 250, 231, 91))
        self.mode.setObjectName("mode")
        self.direct_mode = QtWidgets.QRadioButton(self.mode)
        self.direct_mode.setGeometry(QtCore.QRect(30, 30, 158, 17))
        self.direct_mode.setObjectName("direct_mode")
        self.manual_mode = QtWidgets.QRadioButton(self.mode)
        self.manual_mode.setGeometry(QtCore.QRect(30, 60, 158, 17))
        self.manual_mode.setObjectName("manual_mode")
        self.verticalLayoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.verticalLayoutWidget.setGeometry(QtCore.QRect(30, 80, 651, 151))
        self.verticalLayoutWidget.setObjectName("verticalLayoutWidget")
        self.buttons_layout = QtWidgets.QVBoxLayout(self.verticalLayoutWidget)
        self.buttons_layout.setContentsMargins(0, 0, 0, 0)
        self.buttons_layout.setObjectName("buttons_layout")
        self.main_btn_layput = QtWidgets.QHBoxLayout()
        self.main_btn_layput.setContentsMargins(10, 10, 10, 10)
        self.main_btn_layput.setObjectName("main_btn_layput")
        self.clear_btn = QtWidgets.QPushButton(self.verticalLayoutWidget)
        self.clear_btn.setObjectName("clear_btn")
        self.main_btn_layput.addWidget(self.clear_btn)
        self.cancel_btn = QtWidgets.QPushButton(self.verticalLayoutWidget)
        self.cancel_btn.setObjectName("cancel_btn")
        self.main_btn_layput.addWidget(self.cancel_btn)
        self.extend_btn = QtWidgets.QPushButton(self.verticalLayoutWidget)
        self.extend_btn.setObjectName("extend_btn")
        self.main_btn_layput.addWidget(self.extend_btn)
        self.submit_btn = QtWidgets.QPushButton(self.verticalLayoutWidget)
        self.submit_btn.setObjectName("submit_btn")
        self.main_btn_layput.addWidget(self.submit_btn)
        self.buttons_layout.addLayout(self.main_btn_layput)
        self.quickes = QtWidgets.QHBoxLayout()
        self.quickes.setContentsMargins(10, 10, 10, 10)
        self.quickes.setObjectName("quickes")
        self.mins_5 = QtWidgets.QPushButton(self.verticalLayoutWidget)
        self.mins_5.setObjectName("mins_5")
        self.quickes.addWidget(self.mins_5)
        self.mins_10 = QtWidgets.QPushButton(self.verticalLayoutWidget)
        self.mins_10.setObjectName("mins_10")
        self.quickes.addWidget(self.mins_10)
        self.mins_30 = QtWidgets.QPushButton(self.verticalLayoutWidget)
        self.mins_30.setObjectName("mins_30")
        self.quickes.addWidget(self.mins_30)
        self.mins_60 = QtWidgets.QPushButton(self.verticalLayoutWidget)
        self.mins_60.setObjectName("mins_60")
        self.quickes.addWidget(self.mins_60)
        self.buttons_layout.addLayout(self.quickes)
        self.timeout_box = QtWidgets.QCheckBox(self.centralwidget)
        self.timeout_box.setGeometry(QtCore.QRect(280, 260, 151, 17))
        self.timeout_box.setObjectName("timeout_box")
        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "ShutDownify"))
        self.hours_field.setPlainText(_translate("MainWindow", "0"))
        self.minuits_field.setPlainText(_translate("MainWindow", "0"))
        self.seconds_field.setPlainText(_translate("MainWindow", "0"))
        self.hrs_label.setText(_translate("MainWindow", "Hours"))
        self.minutes_label.setText(_translate("MainWindow", "Minutes"))
        self.seconds_label.setText(_translate("MainWindow", "Seconds"))
        self.mode.setTitle(_translate("MainWindow", "Mode"))
        self.direct_mode.setText(_translate("MainWindow", "Direct mode"))
        self.manual_mode.setText(_translate("MainWindow", "Manual mode"))
        self.clear_btn.setText(_translate("MainWindow", "Clear"))
        self.cancel_btn.setText(_translate("MainWindow", "Cancel"))
        self.extend_btn.setText(_translate("MainWindow", "Extend"))
        self.submit_btn.setText(_translate("MainWindow", "Submit"))
        self.mins_5.setText(_translate("MainWindow", "+5 mins"))
        self.mins_10.setText(_translate("MainWindow", "+10 mins"))
        self.mins_30.setText(_translate("MainWindow", "+30 mins"))
        self.mins_60.setText(_translate("MainWindow", "+1 hr"))
        self.timeout_box.setText(_translate(
            "MainWindow", "Fast display timeout"))


class MainWindow(QtWidgets.QMainWindow):

    def __init__(self, parent=None):
        self.call = callback()
        super(MainWindow, self).__init__(parent=parent)

        self.ui = Ui_MainWindow()
        self.ui.setupUi(self)
        self.setWindowIcon(QtGui.QIcon('shutdown.ico'))
        self.setWindowFlag(QtCore.Qt.WindowMaximizeButtonHint, False)
        # add listeners to buttons and fields
        self.ui.clear_btn.clicked.connect(self.clear_fields)
        self.ui.direct_mode.setChecked(True)
        self.ui.timeout_box.setChecked(True)

        self.ui.submit_btn.installEventFilter(self)
        self.ui.extend_btn.installEventFilter(self)
        self.ui.cancel_btn.installEventFilter(self)
        self.ui.hours_field.installEventFilter(self)
        self.ui.minuits_field.installEventFilter(self)
        self.ui.seconds_field.installEventFilter(self)
        self.ui.mins_5.installEventFilter(self)
        self.ui.mins_10.installEventFilter(self)
        self.ui.mins_30.installEventFilter(self)
        self.ui.mins_60.installEventFilter(self)
        self.ui.manual_mode.installEventFilter(self)
        self.ui.direct_mode.installEventFilter(self)
        self.ui.extend_btn.setToolTip(
            "Extend the time by the time you have set")
        self.ui.mode.setToolTip(
            "Should manually choose the mode (Default: Direct mode)")
        self.ui.timeout_box.setToolTip(
            "This will make the display turn off after 60 seconds of inactivity")
        self.ui.direct_mode.setToolTip("Starts a  timer immediately")
        self.ui.manual_mode.setToolTip(
            "Adds the time to the current timer")

    def get_numbers(self):
        try:
            self.hrs_val = int(self.ui.hours_field.toPlainText())
            self.min_val = int(self.ui.minuits_field.toPlainText())
            self.sec_val = int(self.ui.seconds_field.toPlainText())
            self.finalseconds = self.hrs_val*3600+self.min_val*60+self.sec_val
        except ValueError:
            self.criticalmsg.setInformativeText(
                'Characters are not allowed')
            self.criticalmsg.exec_()
            self.hrs_val = 0
            self.min_val = 0
            self.sec_val = 0
            self.finalseconds = 1
            self.ui.hours_field.setPlainText("0")
            self.ui.minuits_field.setPlainText("0")
            self.ui.seconds_field.setPlainText("0")

    def clear_fields(self):
        self.ui.hours_field.setPlainText("0")
        self.ui.minuits_field.setPlainText("0")
        self.ui.seconds_field.setPlainText("0")

    # EVENT FILTER
    # NOT RECOMMENDED in general to use the setplaintext function in a event filter directly  as it will cause unknown errors , clear references must be made in future versions
    def eventFilter(self, source, event):

        # Alternative to the click.connect()
        # handles mousevents

        if event.type() == QtCore.QEvent.MouseButtonPress:
            self.criticalmsg = QMessageBox()
            self.criticalmsg.setIcon(QMessageBox.Critical)
            self.criticalmsg.setInformativeText("Error")
            self.criticalmsg.setWindowTitle("Error")
            self.informationmsg = QMessageBox()
            self.informationmsg.setIcon(QMessageBox.Information)
            self.informationmsg.setInformativeText("Information")
            self.informationmsg.setWindowTitle("Information")

            if self.ui.direct_mode.isChecked():
                self.get_numbers()
                if(source == self.ui.mins_5):
                    self.quick = 5*60
                    self.informationmsg.setInformativeText(
                        "Starting a timer for 5 minutes ")
                    self.informationmsg.exec_()
                    self.call.submit(self.quick)
                    self.call.sleeper_action(self.ui.timeout_box.isChecked())
                elif(source == self.ui.mins_10):
                    self.quick: int = 10*60
                    self.informationmsg.setInformativeText(
                        "Starting a timer for 10 minutes ")
                    self.informationmsg.exec_()
                    self.call.submit(self.quick)
                    self.call.sleeper_action(self.ui.timeout_box.isChecked())
                elif(source == self.ui.mins_30):
                    self.quick: int = 30*60
                    self.informationmsg.setInformativeText(
                        "Starting a timer for 30 minutes ")
                    self.informationmsg.exec_()
                    self.call.submit(self.quick)
                    self.call.sleeper_action(self.ui.timeout_box.isChecked())
                elif(source == self.ui.mins_60):
                    self.quick: int = 60*60
                    self.informationmsg.setInformativeText(
                        "Starting a timer for 1 hour ")
                    self.informationmsg.exec_()
                    self.call.submit(self.quick)
                    self.call.sleeper_action(self.ui.timeout_box.isChecked())
            elif self.ui.manual_mode.isChecked():
                self.get_numbers()
                if(source == self.ui.mins_5):
                    self.quick = 5
                    self.ui.minuits_field.setPlainText(
                        str(self.quick+self.min_val))
                    self.informationmsg.setInformativeText(
                        "Adding 5 minutes ")
                    self.informationmsg.exec_()
                elif(source == self.ui.mins_10):
                    self.quick = 10
                    self.ui.minuits_field.setPlainText(
                        str(self.quick+self.min_val))
                    self.informationmsg.setInformativeText(
                        "Adding 10 minutes ")
                    self.informationmsg.exec_()
                elif(source == self.ui.mins_30):
                    self.quick = 30
                    self.ui.minuits_field.setPlainText(
                        str(self.quick+self.min_val))
                    self.informationmsg.setInformativeText(
                        "Adding 30 minutes ")
                    self.informationmsg.exec_()
                elif(source == self.ui.mins_60):
                    self.quick = 1
                    self.ui.hours_field.setPlainText(
                        str(self.quick+self.hrs_val))
                    self.informationmsg.setInformativeText(
                        "Adding 1 hour ")
                    self.informationmsg.exec_()
            self.get_numbers()
            if (self.finalseconds < 20 and (source is self.ui.submit_btn or source is self.ui.extend_btn)):
                self.criticalmsg.setInformativeText(
                    'Minimum time is 20 seconds')
                self.criticalmsg.exec_()
            elif(source is self.ui.submit_btn):
                self.get_numbers()
                self.call.submit(self.finalseconds)
                self.call.sleeper_action(self.ui.timeout_box.isChecked())
            elif source is self.ui.extend_btn:
                self.get_numbers()
                self.extendstatus = self.call.extend(
                    self.finalseconds)

                if(not self.extendstatus):
                    self.criticalmsg.setInformativeText(
                        'Start the timer first')
                    self.criticalmsg.exec_()
                else:
                    self.call.sleeper_action(self.ui.timeout_box.isChecked())

            if source is self.ui.cancel_btn:
                self.call.cancel()
                self.call.sleep_reset()

        # Clears the field value  if the user enters the fields
        if event.type() == QtCore.QEvent.Enter:
            if type(source) is QtWidgets.QPlainTextEdit:
                if source.toPlainText() == '0':
                    source.setPlainText("")
                    return True
            if type(source) == QtWidgets.QPushButton:
                if(self.ui.hours_field.toPlainText() == ''):
                    self.ui.hours_field.setPlainText("0")
                if(self.ui.minuits_field.toPlainText() == ''):
                    self.ui.minuits_field.setPlainText("0")
                if(self.ui.seconds_field.toPlainText() == ''):
                    self.ui.seconds_field.setPlainText("0")
        # Sets the field value to 0 if the user leaves the fields
        if event.type() == QtCore.QEvent.Leave:

            if(type(source) is QtWidgets.QPlainTextEdit):
                # if the user enters a letter in the hours field or if its empty
                if(any(c.isalpha() for c in self.ui.hours_field.toPlainText())):
                    self.ui.hours_field.setPlainText("0")
                if(any(c.isalpha() for c in self.ui.minuits_field.toPlainText())):
                    self.ui.minuits_field.setPlainText("0")
                if(any(c.isalpha() for c in self.ui.seconds_field.toPlainText())):
                    self.ui.seconds_field.setPlainText("0")

        return QtWidgets.QWidget.eventFilter(self, source, event)


# for colors
# QLineEdit
# {
#     background-color: black
# }

# QLineEdit[text = ""]
# {
#     background-color: red
# }

if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)
    w = MainWindow()
    w.show()
    sys.exit(app.exec_())
